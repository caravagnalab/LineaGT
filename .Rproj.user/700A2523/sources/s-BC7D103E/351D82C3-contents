run_selection = function(dataset, k_min=5, k_max=25, n_runs=3,
                         columns=list(), IS_values=list(),
                         min_cov=50, min_ccf=0.05, k_interval=c(5,25), metric="calinski_harabasz_score",
                         steps=500, lr=0.005, covariance="diag",
                         filename="", random_state=25) {
  ic = data.frame(matrix(nrow=0, ncol=4)); colnames(ic) = c("BIC", "AIC", "ICL", "NLL")
  losses = data.frame(matrix(nrow=0, ncol=steps)); colnames(losses) = paste("iter_", 1:steps, sep="")
  grads = data.frame(matrix(nrow=0, ncol=steps)); colnames(grads) = paste("iter_", 1:steps, sep="")

  for (k in as.integer(k_min):as.integer(k_max)) {
    obj = lineaGT::mixture_model(k, dataset, columns=columns, IS_values=IS_values)
    obj = lineaGT::filter_dataset(obj, min_cov=min_cov, min_ccf=min_ccf, k_interval=k_interval,
                                  metric=metric, random_state=random_state)
    obj = lineaGT::run_inference(obj, steps=steps, covariance=covariance, lr=lr, random_state=random_state)
    obj = lineaGT::classifier(obj)

    IS_k = obj$dataframe$IS
    columns_k = obj$dimensions
    df = obj$dataframe

    for (run in 1:n_runs) {
      print(paste("RUN", run, "- K =", k))
      obj_k = lineaGT::mixture_model(k, df, columns=columns_k, IS_values=IS_k)
      obj_k = lineaGT::run_inference(obj_k, steps=steps, covariance=covariance, lr=lr, random_state=random_state)
      obj_k = lineaGT::classifier(obj_k)

      print("model done")

      kk = obj_k$K
      model = obj_k$py_model
      ic[paste(kk, run,sep=":"),] = list("BIC"=model$compute_ic(method="BIC")$numpy(),
                                         "AIC"=model$compute_ic(method="AIC")$numpy(),
                                         "ICL"=model$compute_ic(method="ICL")$numpy(),
                                         "NLL"=model$nll$numpy())

      n_iter = model$losses_grad_train$losses %>% length
      losses[paste(kk, run, sep=":"),1:n_iter] = model$losses_grad_train$losses
      grads[paste(kk, run, "mean", sep=":"), 1:n_iter] = model$losses_grad_train$gradients$mean_param
      grads[paste(kk, run, "sigma", sep=":"), 1:n_iter] = model$losses_grad_train$gradients$sigma_vector_param
      grads[paste(kk, run, "weights", sep=":"), 1:n_iter] = model$losses_grad_train$gradients$weights_param
    }
    gc()
  }

  selection = list("ic"=ic, "losses"=losses, "grads"=grads)

  if (filename != "") saveRDS(object=selection, file=filename)
  return(selection)
}
