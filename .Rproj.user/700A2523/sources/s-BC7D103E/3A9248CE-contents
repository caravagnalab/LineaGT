#' VAF scatterplot
#'
#' @description Function to plot the VAFs of the mutations one timepoint against the other
#'
#' @param obj a mvnmm object
#' @param min_ccf value in [0,1] to show only the clusters with a minimum CCF of min_ccf in at least one timepoint
#' @param highlight a list of labels ID to show. All the clusters in the list are shown, even if the CCF is lower than min_ccf
#'
#' @import ggplot2
#' @importFrom dplyr select starts_with
#' @importFrom purrr is_empty
#'
#' @export plot_vaf
#'
#' @examples
#' obj = run_viber(obj, lineaGT::homo_ltr.vaf, min_ccf=0.07)
#' plot_vaf(obj)

plot_vaf = function(obj, min_ccf=0, highlight=c()) {
  dataframe = vaf_dataframe(obj)
  try(expr = {dataframe = dataframe %>% dplyr::select(-"vaf.over")}, silent=T)
  try(expr = {dataframe = dataframe %>% dplyr::select(-"vaf.steady")}, silent=T)

  color_palette = highlight_palette(obj$color_palette, highlight)
  if (purrr::is_empty(highlight)) highlight = select_relevant_clusters(obj, min_ccf)

  combinations = get_pairs(dataframe, columns=dataframe %>% dplyr::select(dplyr::starts_with("vaf")) %>% colnames)
  color_palette = get_colors(list_lab=(dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique())

  theta = get_binomial_theta(obj)

  p = list()
  for (t1_t2 in combinations$pair_name) {
    xy = strsplit(t1_t2, ":")[[1]]

    df = dataframe %>% filter(labels %in% highlight)
    theta = theta %>% filter(labels %in% highlight)
    if (nrow(df) > 0) { p[[t1_t2]] = plot_vaf_2D(df, theta, xy[1], xy[2], color_palette) }
  }

  return(p)
}


plot_vaf_2D = function(dataframe, theta, dim1, dim2, color_palette) {
  pl = dataframe %>%
    dplyr::select(starts_with("vaf"), labels, lineage, labels_mut, mutation, pi_viber) %>%
    ggplot() + geom_point(aes_string(x=dim1, y=dim2, color="labels_mut"), alpha=.5) +
    geom_point(data=theta, aes_string(x=dim1, y=dim2, color="labels_mut"), shape=0, inherit.aes=F) +
    facet_grid(lineage~labels) + scale_color_manual(values=color_palette) +
    my_ggplot_theme() + xlab(split_to_camelcase(dim1)) + ylab(split_to_camelcase(dim2)) +
    ylim(0,100) + xlim(0,100) + labs(color="Clusters")
  return(pl)
}
