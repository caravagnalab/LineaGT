devtools::load_all()
get_vaf_df("../model/datasets/HOMO_LTR.vaf.csv", obj, keep_thr=0)
devtools::load_all()
devtools::load_all()
devtools::document()
get_vaf_df("../model/datasets/HOMO_LTR.vaf.csv", obj, keep_thr=0)
lineages = obj$lineages
highlight = select_relevant_clusters(obj, keep_thr=keep_thr)
keep_thr=0
highlight = select_relevant_clusters(obj, keep_thr=keep_thr)
dataframe = obj$dataframe %>% filter(labels %in% highlight)
dataframe
IS_keep = dataframe$IS
vaf_file = "../model/datasets/HOMO_LTR.vaf.csv"
read.csv(vaf_file) %>% filter(IS %in% IS_keep, lineage %in% lineages)
vaf_ref_alt = read.csv(vaf_file) %>% filter(IS %in% IS_keep, lineage %in% lineages)
dplyr::inner_join(vaf_ref_alt, dataframe, by=c("IS", "lineage"))
dataframe
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt()
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% separate(variable, into=c("timepoint", "lineage"), sep="_")
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("timepoint", "lineage"), sep="_")
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
tidyr::pivot_wider(names_from="timepoints", values_from="value")
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
tidyr::pivot_wider(names_from="timepoint", values_from="value")
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
mutate("else"=NULL) %>%
tidyr::pivot_wider(names_from="timepoint", values_from="value")
devtools::load_all()
get_vaf_df("../model/datasets/HOMO_LTR.vaf.csv", obj, keep_thr=0)
dataframe = obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
mutate("else"=NULL) %>%
tidyr::pivot_wider(names_from="timepoint", values_from="value")
IS_keep = dataframe$IS
vaf_ref_alt = read.csv(vaf_file) %>% filter(IS %in% IS_keep, lineage %in% lineages)
dplyr::inner_join(vaf_ref_alt, dataframe, by=c("IS", "lineage"))
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
mutate("else"=NULL) %>%
tidyr::pivot_wider(names_from="timepoint", values_from="value", prefix="cov_")
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
mutate("else"=NULL)
?tidyr::pivot_wider()
obj$dataframe %>% filter(labels %in% highlight) %>%
reshape2::melt() %>% tidyr::separate(variable, into=c("else", "timepoint", "lineage"), sep="_") %>%
mutate("else"=NULL) %>%
tidyr::pivot_wider(names_from="timepoint", values_from="value", names_prefix="cov_")
devtools::load_all()
get_vaf_df("../model/datasets/HOMO_LTR.vaf.csv", obj, keep_thr=0)
homo_ltr.vaf = get_vaf_df("../model/datasets/HOMO_LTR.vaf.csv", obj, keep_thr=0)
usethis::use_data(homo_ltr.vaf)
get_trials_successes(homo_ltr.vaf)
devtools::load_all()
get_trials_successes(homo_ltr.vaf)
devtools::load_all()
get_trials_successes(homo_ltr.vaf)
devtools::load_all()
get_trials_successes(homo_ltr.vaf)
viber_df = get_trials_successes(vaf_df)
vaf_df = homo_ltr.vaf
viber_df = get_trials_successes(vaf_df)
highlight=list()
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
highlight
joined = data.frame()
fit_all = list()
devtools::load_all()
viber_run = run_viber(obj, homo_ltr.vaf)
viber_run = run_viber(obj, homo_ltr.vaf, keep_thr=0.12)
viber_run = run_viber(obj, homo_ltr.vaf, keep_thr=0.5)
devtools::load_all()
dataset = homo_ltr.coverage
lineages = list("MNC", "B", "T", "Myeloid")
obj = lineaGT::mixture_model(20, dataset %>% dplyr::select(starts_with("cov")), IS_values=dataset$IS, lineages=lineages)
obj = lineaGT::filter_dataset(obj)
obj = lineaGT::run_inference(obj)
obj = lineaGT::classifier(obj)
obj
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
devtools::load_all()
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
devtools::load_all()
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
devtools::load_all()
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
devtools::load_all()
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
devtools::load_all()
plot_list = plot_scatter_density(obj, plot_density=TRUE, facet=FALSE)
plot_list$`cov_early_B:cov_early_MNC`
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
plot_exp_fit()
plot_exp_fit(obj)
get_muller_pop(obj)
pop_df = get_muller_pop(obj)
pop_df %>% filter(Identity==cl))$lm_a %>% unique()
cl="C_4"
(pop_df %>% filter(Identity==cl))$lm_a %>% unique()
(pop_df %>% filter(Identity==cl))
(pop_df %>% filter(Identity==cl))$lineage %>% unique()
(pop_df %>% filter(Identity==cl))$Lineage %>% unique()
1:max(pop_df$Generation)
exp(lm_a)*exp(lm_r*xx)
lm_a = (pop_df %>% filter(Identity==cl))$lm_a %>% unique()
lm_r = (pop_df %>% filter(Identity==cl))$lm_r %>% unique()
ll = (pop_df %>% filter(Identity==cl))$Lineage %>% unique()
xx = 1:max(pop_df$Generation)
yy = exp(lm_a)*exp(lm_r*xx)
xx
yy
lm_a
pop_df$Generation
pop_df %>% View
exp(lm_a)*exp(lm_r*xx)
lm_a
lm_r
exp(4.464645) * exp(-0.01392176*1)
devtools::load_all()
plot_exp_fit(obj)
devtools::load_all()
plot_exp_fit(obj)
plot_exp_rate(obj)
plot_mullerplot(obj)
devtools::load_all()
plot_mullerplot(obj)
homo_ltr.vaf
homo_ltr.coverage
vaf_df = homo_ltr.vaf
viber_df = get_trials_successes(vaf_df)
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
highlight=list()
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
joined = data.frame()
fit_all = list()
for (cluster in highlight) {
print(cluster)
fit_k = fit_cluster(viber_df, cluster_id=cluster)
tryCatch(expr = { joined = rbind(joined, fit_k$df$joined) },
error = function(e) {
fit_k$df$joined$viber_clusters = ""
fit_k$df$joined$viber_pi = 0
joined = rbind(joined, fit_k$df$joined) })
fit_all[[cluster]] = fit_k$fit
}
viber_df$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, keep_thr), highlight)
keep_thr=0.07
clusters_joined = intersect(select_relevant_clusters(obj, keep_thr), highlight)
clusters_joined
devtools::load_all()
clusters_joined = intersect(select_relevant_clusters(obj, keep_thr), highlight)
clusters_joined
clusters_joined = intersect(select_relevant_clusters(obj, 0.05), highlight)
intersect(select_relevant_clusters(obj, 0.05), highlight)
intersect(select_relevant_clusters(obj, 0.01), highlight)
intersect(select_relevant_clusters(obj, 0.02), highlight)
intersect(select_relevant_clusters(obj, 0.07), highlight)
intersect(select_relevant_clusters(obj, 0.07))
select_relevant_clusters(obj, 0.07)
get_muller_pop()
get_muller_pop(obj)
pop_df = get_muller_pop(obj)
pop_df %>% group_by(Identity, Lineage)
pop_df %>% group_by(Identity, Lineage) %>% summarise(nn=dplyr::n())
pop_df %>% group_by(Identity, Lineage) %>% summarise(nn=dplyr::n()) %>% filter(nn!=3)
pop_df %>% group_by(Identity, Lineage) %>% filter(any(Frequency > 0.07))
pop_df %>% group_by(Identity, Lineage) %>% filter(any(Frequency > 0.007))
min_ccf = 0.007
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
clusters_joined
devtools::load_all()
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
clusters_joined
clusters_joined = intersect(select_relevant_clusters(obj, 0.01), highlight)
clusters_joined
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
clusters_joined = intersect(select_relevant_clusters(obj, 0.01), highlight)
clusters_joined
clusters_joined = intersect(select_relevant_clusters(obj, 0.07), highlight)
clusters_joined
clusters_joined = intersect(select_relevant_clusters(obj, 0.1), highlight)
clusters_joined
pop_df %>% group_by(Identity, Lineage) %>% filter(any(Frequency > 0.007))
pop_df %>% group_by(Identity, Lineage) %>% filter(labels=="C_9")
pop_df %>% group_by(Identity, Lineage) %>% filter(Identity=="C_9")
devtools::load_all()
clusters_joined = intersect(select_relevant_clusters(obj, 0.1), highlight)
clusters_joined
clusters_joined = intersect(select_relevant_clusters(obj, 0.07), highlight)
clusters_joined
pop_df %>% group_by(Identity, Lineage) %>% filter(Identity=="C_9")
pop_df = get_muller_pop(obj)
pop_df %>% group_by(Identity, Lineage) %>% filter(Identity=="C_9")
25/2
viber_df = get_trials_successes(vaf_df)
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
joined = data.frame()
fit_all = list()
for (cluster in highlight) {
print(cluster)
fit_k = fit_cluster(viber_df, cluster_id=cluster)
tryCatch(expr = { joined = rbind(joined, fit_k$df$joined) },
error = function(e) {
fit_k$df$joined$viber_clusters = ""
fit_k$df$joined$viber_pi = 0
joined = rbind(joined, fit_k$df$joined) })
fit_all[[cluster]] = fit_k$fit
}
for (cluster in clusters_joined) {
print(cluster)
fit_k = fit_cluster(viber_df, cluster_id=cluster)
tryCatch(expr = { joined = rbind(joined, fit_k$df$joined) },
error = function(e) {
fit_k$df$joined$viber_clusters = ""
fit_k$df$joined$viber_pi = 0
joined = rbind(joined, fit_k$df$joined) })
fit_all[[cluster]] = fit_k$fit
}
viber_df = get_trials_successes(vaf_df)
viber_df
obj$dataframe
obj$dataframe %>% View
viber_df
viber_df %>% View
viber_df$joined
viber_df$joined %>% as_tibble()
devtools::load_all()
obj_prova = run_viber(obj, vaf_df, min_ccf=0.07)
obj_prova
obj_prova$viber_run
obj_prova$viber_run$C_9
obj_prova$viber_run$C_1$x
obj_prova$dataframe_vaf
obj_prova$dataframe_vaf %>% head
devtools::load_all()
obj_prova = run_viber(obj, vaf_df, min_ccf=0.07)
obj_prova$dataframe_vaf
obj_prova$viber_run
obj_prova$viber_run$C_16
obj_prova$viber_run$C_16$x
obj_prova$viber_run$C_16$Y
obj_prova$viber_run$C_16$y
obj_prova$viber_run$C_16$theta_k
obj_prova$dataframe_vaf %>% head()
joined = data.frame()
fit_all = list()
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_df, cluster_id=cluster)
tryCatch(expr = { joined = rbind(joined, fit_k$df$joined) },
error = function(e) {
fit_k$df$joined$viber_clusters = ""
fit_k$df$joined$viber_pi = 0
joined = rbind(joined, fit_k$df$joined) })
fit_all[[cluster]] = fit_k$fit
}
joined
fit_cluster(viber_df, cluster_id=cluster)
viber_df_k = list("successes"=viber_df$successes %>% filter(labels==cluster_id) %>%
dplyr::select(starts_with(c("early", "mid", "late"))) %>% as_tibble(),
"trials"=viber_df$trials %>% filter(labels==cluster_id) %>%
dplyr::select(starts_with(c("early", "mid", "late"))) %>% as_tibble(),
"joined"=viber_df$joined %>% filter(labels==cluster_id))
viber_df_k = list("successes"=viber_df$successes %>% filter(labels==cluster) %>%
dplyr::select(starts_with(c("early", "mid", "late"))) %>% as_tibble(),
"trials"=viber_df$trials %>% filter(labels==cluster) %>%
dplyr::select(starts_with(c("early", "mid", "late"))) %>% as_tibble(),
"joined"=viber_df$joined %>% filter(labels==cluster))
viber_df_k
k = viber_df_k$successes %>% nrow
k
if (k == 1) { fit="" }
fit = VIBER::variational_fit(viber_df_k$successes, viber_df_k$trials, K=k)
fit = VIBER::choose_clusters(fit, binomial_cutoff=0, lineages_cutoff=0, pi_cutoff=0.01)
fit = VIBER::choose_clusters(fit, binomial_cutoff=0, dimension_cutoff=0, pi_cutoff=0.01)
?VIBER::choose_clusters
fit = VIBER::choose_clusters(fit, binomial_cutoff=0, dimensions_cutoff=0, pi_cutoff=0.01)
fit
labels = fit$labels$cluster.Binomial
labels
viber_df_k$joined$viber_clusters = labels
viber_df_k
tryCatch(expr = {
fit = VIBER::variational_fit(viber_df_k$successes, viber_df_k$trials, K=k)
fit = VIBER::choose_clusters(fit, binomial_cutoff=0, dimensions_cutoff=0, pi_cutoff=0.01)
labels = fit$labels$cluster.Binomial
viber_df_k$joined$viber_clusters = labels
viber_df_k$joined$viber_pi = fit$pi_k[labels] %>% as.vector() },
error = function(e) {
viber_df_k$joined$viber_clusters = ""
viber_df_k$joined$viber_pi = 0
fit = ""
})
tryCatch(expr = {
fit = VIBER::variational_fit(viber_df_k$successes, viber_df_k$trials, K=k)
fit = VIBER::choose_clusters(fit, binomial_cutoff=0, dimensions_cutoff=0, pi_cutoff=0.01)
labels = fit$labels$cluster.Binomial
viber_df_k$joined$viber_clusters = labels
viber_df_k$joined$viber_pi = fit$pi_k[labels] %>% as.vector() },
error = function(e) {
viber_df_k$joined$viber_clusters = ""
viber_df_k$joined$viber_pi = 0
fit = ""
})
viber_df_k$joined$viber_pi = fit$pi_k[labels] %>% as.vector()
viber_df_k$joined
viber_df_k$joined
viber_df = get_trials_successes(vaf_df)
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
joined = data.frame()
fit_all = list()
clusters_joined
min_ccf
min_ccf = 0.07
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
clusters_joined
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_df, cluster_id=cluster)
joined = rbind(joined, fit_k$df)
fit_all[[cluster]] = fit_k$fit
}
devtools::load_all()
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_df, cluster_id=cluster)
joined = rbind(joined, fit_k$df)
fit_all[[cluster]] = fit_k$fit
}
devtools::load_all()
joined = data.frame()
fit_all = list()
clusters_joined
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_df, cluster=cluster)
joined = rbind(joined, fit_k$df)
fit_all[[cluster]] = fit_k$fit
}
devtools::load_all()
obj_prova = run_viber(obj, vaf_df, min_ccf=0.07)
obj_prova$dataframe_vaf
obj_prova$dataframe_vaf$labels_viber
fit_k = fit_cluster(viber_df, cluster=cluster)
viber_df = get_trials_successes(vaf_df)
if (purrr::is_empty(highlight)) highlight = viber_df$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
clusters_joined
joined = data.frame()
fit_all = list()
cluster="C_12"
fit_k = fit_cluster(viber_df, cluster=cluster)
fit_k
devtools::load_all()
fit_k = fit_cluster(viber_df, cluster=cluster)
fit_k$df
devtools::load_all()
fit_k = fit_cluster(viber_df, cluster=cluster)
viber_df_k$joined %>% colnames
"viber_pi" %in% viber_df_k$joined %>% colnames
"viber_pi" %in% (viber_df_k$joined %>% colnames)
=viber_df$successes
viber_df$successes
devtools::load_all()
fit_k = fit_cluster(viber_df, cluster=cluster)
fit_k
fit_k$df
obj_prova = run_viber(obj, vaf_df, min_ccf=0.1)
obj_prova$dataframe_vaf
obj_prova$dataframe_vaf %>% head
obj_prova$dataframe_vaf$labels_viber
joined = obj_prova$dataframe_vaf
dp = joined %>%
reshape2::melt(id=c("IS", "clusters", "mutation", "experiment", "viber_pi", "clusters_mut", "viber_clusters")) %>%
separate(variable, into=c("time_lin", "dp_alt"), sep="[.]") %>%
filter(dp_alt == "dp") %>% mutate(dp=value, value=NULL) %>% dplyr::select(-dp_alt)
dp = joined %>%
reshape2::melt(id=c("IS", "clusters", "mutation", "experiment", "viber_pi", "clusters_mut", "viber_clusters")) %>%
tidyr::separate(variable, into=c("time_lin", "dp_alt"), sep="[.]") %>%
filter(dp_alt == "dp") %>% mutate(dp=value, value=NULL) %>% dplyr::select(-dp_alt)
joined = joined %>% unite(col="labels_mut", c("labels", "labels_viber"), sep=".", remove=F)
joined = joined %>% tidyr::unite(col="labels_mut", c("labels", "labels_viber"), sep=".", remove=F)
joined
joined %>%
reshape2::melt(id=c("IS", "labels", "mutation", "experiment", "pi_viber", "labels_mut", "labels_viber")) %>%
tidyr::separate(variable, into=c("time_lin", "dp_alt"), sep="[.]") %>%
filter(dp_alt == "dp") %>% mutate(dp=value, value=NULL) %>% dplyr::select(-dp_alt)
dp = joined %>%
reshape2::melt(id=c("IS", "labels", "mutation", "experiment", "pi_viber", "labels_mut", "labels_viber")) %>%
tidyr::separate(variable, into=c("time_lin", "dp_alt"), sep="[.]") %>%
filter(dp_alt == "dp") %>% mutate(dp=value, value=NULL) %>% dplyr::select(-dp_alt)
alt = joined %>%
reshape2::melt(id=c("IS", "labels", "mutation", "experiment", "pi_viber", "labels_mut", "labels_viber")) %>%
tidyr::separate(variable, into=c("time_lin", "dp_alt"), sep="[.]") %>%
filter(dp_alt == "alt") %>% mutate(alt=value, value=NULL) %>% dplyr::select(-dp_alt)
vaf = inner_join(dp, alt) %>% mutate(vaf=alt/dp*100) %>% mutate(vaf=ifelse(is.na(vaf), 0, vaf)) %>%
separate("time_lin", into=c("timepoint", "lineage")) %>% dplyr::select(-"dp", -"alt") %>%
pivot_wider(names_from=c("timepoint"), values_from="vaf", names_sep=".", names_prefix="vaf.")
vaf = inner_join(dp, alt) %>% mutate(vaf=alt/dp*100) %>% mutate(vaf=ifelse(is.na(vaf), 0, vaf)) %>%
separate("time_lin", into=c("timepoint", "lineage")) %>% dplyr::select(-"dp", -"alt") %>%
dplyr::pivot_wider(names_from=c("timepoint"), values_from="vaf", names_sep=".", names_prefix="vaf.")
vaf = inner_join(dp, alt) %>% mutate(vaf=alt/dp*100) %>% mutate(vaf=ifelse(is.na(vaf), 0, vaf)) %>%
separate("time_lin", into=c("timepoint", "lineage")) %>% dplyr::select(-"dp", -"alt") %>%
tidyr::pivot_wider(names_from=c("timepoint"), values_from="vaf", names_sep=".", names_prefix="vaf.")
vaf = dplyr::inner_join(dp, alt) %>% mutate(vaf=alt/dp*100) %>% mutate(vaf=ifelse(is.na(vaf), 0, vaf)) %>%
tidyr::separate("time_lin", into=c("timepoint", "lineage")) %>% dplyr::select(-"dp", -"alt") %>%
tidyr::pivot_wider(names_from=c("timepoint"), values_from="vaf", names_sep=".", names_prefix="vaf.")
vaf
obj_prova$dataframe
obj_prova$dataframe %>% colnames
obj_prova$dataframe_vaf %>% colnames
devtools::lint()
devtools::load_all()
devtools::load_all()
get_binomial_theta(obj_prova)
devtools::load_all()
get_binomial_theta(obj_prova)
devtools::load_all()
get_binomial_theta(obj_prova)
devtools::load_all()
get_binomial_theta(obj_prova)
devtools::load_all()
get_binomial_theta(obj_prova)
devtools::load_all()
get_binomial_theta(obj_prova)
obj_prova$dataframe_vaf
dataframe = vaf_dataframe(obj)
obj = obj_prova
dataframe = vaf_dataframe(obj)
View(dataframe)
View(dataframe)
dataframe
try(expr = {dataframe = dataframe %>% dplyr::select(-"vaf.over")}, silent=T)
try(expr = {dataframe = dataframe %>% dplyr::select(-"vaf.steady")}, silent=T)
color_palette = highlight_palette(obj$color_palette, highlight)
if (purrr::is_empty(highlight)) highlight = get_unique_labels(obj)
if (plot_density) density = lineaGT::compute_density(obj) else density = NULL
combinations = get_pairs(dataset, columns=obj$dimensions)
dataframe
combinations = get_pairs(dataframe, columns=dataframe %>% dplyr::select(dplyr::starts_with("vaf")) %>% colnames)
combinations
get_object = function(py_model) {
obj = list()
obj$dataframe = get_dataset(py_model)
obj$params = get_params(py_model)
obj$K = py_model$params$K
obj$N = py_model$params$N
obj$`T` = py_model$params$`T`
obj$dimensions = py_model$dimensions
obj$lineages = py_model$lineages
# obj$IS = py_model$IS %>% as.character()
obj$py_model = py_model
obj$color_palette = get_colors(obj)
class(obj) = "mvnmm"
return(obj)
}
color_palette = get_colors(list=(dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique())
devtools::load_all()
devtools::load_all()
color_palette = get_colors(list=(dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique())
color_palette
dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique()
(dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique()
devtools::load_all()
color_palette = get_colors(list=(dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique())
color_palette
devtools::load_all()
devtools::load_all()
devtools::load_all()
plot_vaf(obj, min_ccf=0.07)
devtools::load_all()
plot_vaf(obj, min_ccf=0.07)
devtools::load_all()
plot_vaf(obj, min_ccf=0.07)
devtools::load_all()
plot_vaf(obj, min_ccf=0.07)
dataframe
dataframe %>% filter(labels %in% highlight)
devtools::load_all()
plot_vaf(obj, min_ccf=0.07)
theta = get_binomial_theta(obj)
theta
devtools::load_all()
plot_vaf(obj, min_ccf=0.07)
theta = get_binomial_theta(obj)
theta
theta = get_binomial_theta(obj) %>% filter(labels=="C_9")
theta = get_binomial_theta(obj)
theta %>% filter(labels=="C_9")
obj$viber_run$C_9
obj$dataframe_vaf
obj$dataframe_vaf %>% filter(labels=="C_9")
