vaf_df %>% head
vaf_df %>%
tidyr::pivot_wider(values_from=c(starts_with("dp"), starts_with("alt"), starts_with("ref"),
starts_with("vaf"), starts_with("cov")),
names_from=lineage, values_fn=as.numeric)
vaf_df %>%
tidyr::pivot_wider(values_from=c(starts_with("dp"), starts_with("alt"), starts_with("ref"),
starts_with("vaf"), starts_with("cov")),
names_from=lineage, values_fn=as.numeric) %>% colnames()
viber_input = get_input_viber(vaf_df)
viber_input$vaf_df
viber_input$vaf_df$labels
viber_input$alt_early_B
viber_input$trials
viber_input$trials %>% colnames
vaf_df = obj$vaf_dataframe
vaf_df
vaf_df %>% colnames()
vaf_df = vaf_df_from_file(vaf_file.csv)
vaf_df = vaf_df_from_file(vaf_file)
vaf_df = annotate_vaf_df(vaf_df, obj, min_ccf=0.07)
obj = add_vaf(obj, vaf_df)
obj$vaf_dataframe
vaf_df = obj$vaf_dataframe
viber_input = get_input_viber(vaf_df)
viber_input
highlight
highlight=list()
if (purrr::is_empty(highlight)) highlight = viber_input$joined$labels %>% unique() %>% droplevels()
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
if (purrr::is_empty(highlight)) highlight = viber_input$vaf_df$labels %>% unique() %>% droplevels()
highlight
clusters_joined = intersect(select_relevant_clusters(obj, min_ccf), highlight)
clusters_joined
joined = data.frame()
fit_all = list()
cluster = "C_0"
fit_cluster(viber_input, cluster=cluster)
devtools::load_all()
fit_cluster(viber_input, cluster=cluster)
devtools::load_all()
fit_cluster(viber_input, cluster=cluster)
joined = data.frame()
fit_all = list()
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_input, cluster=cluster)
joined = rbind(joined, fit_k$df)
fit_all[[cluster]] = fit_k$fit
}
joined
cluster
clusters_joined
joined %>% View
joined$pi_viber
joined$labels_viber
joined %>% is.na
joined[joined %>% is.na]
joined[is.na(joined)]
joined[is.na(joined),]
joined[any(is.na(joined)),]
joined[any(is.na(joined)),] %>% View
devtools::load_all()
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_input, cluster=cluster)
joined = rbind(joined, fit_k$df)
fit_all[[cluster]] = fit_k$fit
}
joined = data.frame()
fit_all = list()
for (cluster in clusters_joined) {
fit_k = fit_cluster(viber_input, cluster=cluster)
joined = rbind(joined, fit_k$df)
fit_all[[cluster]] = fit_k$fit
}
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::load_all()
devtools::build()
homo_pgk.cov = "../../internship_2021/mutation_dynamics/analysis/model/datasets/HOMO_PGK.coverage.csv"
homo_pgk.vaf = "../../internship_2021/mutation_dynamics/analysis/model/datasets/HOMO_PGK.vaf.csv"
homo_pgk.cov = "../../internship_2021/mutation_dynamics/analysis/model/datasets/HOMO_PGK.coverage.csv" %>% read.csv()
homo_pgk.vaf = "../../internship_2021/mutation_dynamics/analysis/model/datasets/HOMO_PGK.vaf.csv" %>% read.csv()
homo_pgk.cov %>% head
homo_pgk.cov %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("cov"))
homo_pgk.cov %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("cov")) %>% tidyr::replace_na(0)
homo_pgk.cov %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("cov")) %>% replace(is.na(.), 0)
homo_pgk.vaf
homo_pgk.vaf = vaf_df_from_file("../../internship_2021/mutation_dynamics/analysis/model/datasets/HOMO_PGK.vaf.csv")
homo_pgk.vaf
filter_dataset(homo_pgk.cov, columns = homo_pgk.cov %>% dplyr::select(starts_with("cov")), IS=homo_pgk.cov$IS)
filter_dataset(homo_pgk.cov, columns = homo_pgk.cov %>% dplyr::select(starts_with("cov")) %>% colnames, IS=homo_pgk.cov$IS)
homo_pgk.cov = filter_dataset(homo_pgk.cov, columns = homo_pgk.cov %>% dplyr::select(starts_with("cov")) %>% colnames, IS=homo_pgk.cov$IS)
homo_pgk.cov = "../../internship_2021/mutation_dynamics/analysis/model/datasets/HOMO_PGK.coverage.csv" %>% read.csv() %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("cov")) %>% replace(is.na(.), 0)
homo_pgk.cov
homo_pgk.cov = filter_dataset(homo_pgk.cov, columns = homo_pgk.cov %>% dplyr::select(starts_with("cov")) %>% colnames, IS=homo_pgk.cov$IS)
homo_pgk.cov
modsel.homo_pgk = readRDS("../../internship_2021/mutation_dynamics/analysis/model/r_scripts/runs_highK/all/all.HOMO_PGK.kmin30.kmax50.thr50.covdiag.Rds")
K = get_best_k(modsel.homo_pgk)
devtools::load_all()
modsel.homo_pgk = readRDS("../../internship_2021/mutation_dynamics/analysis/model/r_scripts/runs_highK/all/all.HOMO_PGK.kmin30.kmax50.thr50.covdiag.Rds")
K = get_best_k(modsel.homo_pgk)
devtools::load_all()
modsel.homo_pgk = readRDS("../../internship_2021/mutation_dynamics/analysis/model/r_scripts/runs_highK/all/all.HOMO_PGK.kmin30.kmax50.thr50.covdiag.Rds")
K = get_best_k(modsel.homo_pgk)
devtools::load_all()
modsel.homo_pgk = readRDS("../../internship_2021/mutation_dynamics/analysis/model/r_scripts/runs_highK/all/all.HOMO_PGK.kmin30.kmax50.thr50.covdiag.Rds")
K = get_best_k(modsel.homo_pgk)
K
devtools::load_all()
selection_util(1, K, homo_pgk.cov, lineages=list("MNC", "B", "T", "Myeloid"), columns_k=homo_pgk.cov %>% dplyr::select(starts_with("cov")) %>% colnames, IS_k=homo_pgk.cov$IS, steps=700)
devtools::load_all()
obj.homo_pgk = selection_util(1, K, homo_pgk.cov, lineages=list("MNC", "B", "T", "Myeloid"), columns_k=homo_pgk.cov %>% dplyr::select(starts_with("cov")) %>% colnames, IS_k=homo_pgk.cov$IS, steps=700)
obj.homo_pgk
obj.homo_pgk$dataframe
plot_scatter_density(obj.homo_pgk)
scatterplots = plot_scatter_density(obj.homo_pgk)
scatterplots$`cov_early_B:cov_early_MNC`
scatterplots$`cov_early_B:cov_late_B`
plot_mullerplot(obj.homo_pgk)
plot_mullerplot(obj.homo_pgk) %>% patchwork::wrap_plots()
plot_mullerplot(obj.homo_pgk, min_ccf=0.07) %>% patchwork::wrap_plots()
plot_mullerplot(obj.homo_pgk, min_ccf=0.07) %>% patchwork::wrap_plots(guides="collect")
plot_mullerplot(obj.homo_pgk, min_ccf=0.07, wrap=T)
devtools::document()
devtools::document()
plot_mullerplot(obj.homo_pgk, min_ccf=0.07, wrap=T)
select_relevant_clusters(obj.homo_pgk, 0.07)
purrr::is_empty(c())
devtools::load_all()
plot_mullerplot(obj.homo_pgk, min_ccf=0.07, wrap=T)
plot_mullerplot(obj.homo_pgk, min_ccf=0.07, wrap=T) + patchwork::plot_annotation(title="HOMO PGK with threshold at 7% of CCF")
ggsave("plots/homo_pgk.muller.ccf.pdf", width=10, height=8)
plot_mullerplot(obj.homo_pgk, which="pop", min_ccf=0.07, wrap=T) + patchwork::plot_annotation(title="HOMO PGK with threshold at 7% of CCF")
ggsave("plots/homo_pgk.muller.pop.pdf", width=10, height=8)
plot_mullerplot(obj.homo_pgk, which="fitness", min_ccf=0.07, wrap=T) + patchwork::plot_annotation(title="HOMO PGK with threshold at 7% of CCF")
devtools::load_all()
plot_mullerplot(obj.homo_pgk, which="fitness", min_ccf=0.07, wrap=T) + patchwork::plot_annotation(title="HOMO PGK with threshold at 7% of CCF")
ggsave("plots/homo_pgk.muller.fitness.pdf", width=10, height=8)
devtools::load_all()
plot_exp_fit(obj.homo_pgk)
plot_exp_fit(obj.homo_pgk, min_ccf)
plot_exp_fit(obj.homo_pgk, min_ccf=0.07)
plot_exp_fit(obj.homo_pgk, min_ccf=0.07, facet=T)
plot_exp_fit(obj.homo_pgk, min_ccf=0.07)
plot_exp_fit(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
ggsave("plots/homo_pgk.exp_fit.pdf", width=10, height=8)
exp_fit = plot_exp_fit(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
devtools::load_all()
plot_exp_coef(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
plot_exp_rate(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
devtools::load_all()
plot_exp_rate(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
select_relevant_clusters(obj, min_ccf)
highlight
highlight_palette(obj$color_palette, highlight)
color_palette
color_palette = highlight_palette(obj$color_palette, highlight)
names(color_palette) = names(color_palette) %>% stringr::str_replace("C_", "")
color_palette
devtools::load_all()
devtools::load_all()
plot_exp_rate(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
exp_rate = plot_exp_rate(obj.homo_pgk, min_ccf=0.07) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
patchwork::wrap_plots(exp_fit, exp_rate)
patchwork::wrap_plots(exp_fit, exp_rate) + patchwork::plot_annotation(title="Exponential fitting per cluster and lineage, on clusters with at least 7% CCF")
ggsave("plots/homo_pgk.exp_fit.pdf", width=10, height=8)
ggsave("plots/homo_pgk.exp_fit.pdf", width=12, height=8)
homo_pgk.vaf
add_vaf(obj.homo_pgk, homo_pgk.vaf)
add_vaf(obj.homo_pgk, homo_pgk.vaf)$vaf_dataframe
obj.homo_pgk = add_vaf(obj.homo_pgk, homo_pgk.vaf)
saveRDS(obj.homo_pgk, "../../internship_2021/mutation_dynamics/obj.HOMO_PGK.Rds")
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
get_input_viber(homo_pgk.vaf)
homo_pgk.vaf
homo_pgk.vaf = annotate_vaf_df(homo_pgk.vaf, obj.homo_pgk, min_ccf=0.07)
obj.homo_pgk = add_vaf(obj.homo_pgk, homo_pgk.vaf)
saveRDS(obj.homo_pgk, "../../internship_2021/mutation_dynamics/obj.HOMO_PGK.Rds")
get_input_viber(homo_pgk.vaf)
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
obj.homo_pgk2
devtools::load_all()
devtools::load_all()
devtools::install()
gc()
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
devtools::build()
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
devtools::load_all()
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
select_relevant_clusters
get_mean(obj)
get_mean(obj.homo_pgk)
obj.homo_pgk
obj.homo_pgk$params
obj.homo_pgk$params$labels
obj.homo_pgk$params$labels %>% unique()
obj.homo_pgk$params$Sigma
devtools::load_all()
select_relevant_clusters(obj.homo_pgk, min_ccf=0.07)
devtools::install()
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
devtools::load_all()
obj.homo_pgk2 = run_viber(obj.homo_pgk, min_ccf=0.07)
gc()
obj$vaf_dataframe
devtools::load_all()
obj2 = readRDS("../../internship_2021/mutation_dynamics/analysis/model/r_scripts/objects_viber.Rds")
obj2
obj2$vaf_dataframe
obj2$viber_run
plot_vaf(obj2, min_ccf=0.07)
obj = obj2
min_ccf = 0.07
dataframe = obj$vaf_dataframe
try(expr = {dataframe = dataframe %>% dplyr::select(-"vaf.over")}, silent=T)
try(expr = {dataframe = dataframe %>% dplyr::select(-"vaf.steady")}, silent=T)
color_palette = highlight_palette(obj$color_palette, highlight)
color_palette
if (purrr::is_empty(highlight)) highlight = select_relevant_clusters(obj, min_ccf)
color_palette = highlight_palette(obj$color_palette, highlight)
color_palette
combinations = get_pairs(dataframe, columns=dataframe %>% dplyr::select(dplyr::starts_with("vaf")) %>% colnames)
color_palette = get_colors(list_lab=(dataframe %>% filter(labels %in% highlight))$labels_mut %>% unique())
dataframe
dataframe %>% View
dataframe$labels_viber
obj$vaf_dataframe %>% tidyr::unite(col=c("labels","labels_viber"), sep=".")
obj$vaf_dataframe %>% tidyr::unite(col=c("labels","labels_viber"), sep="[.]")
obj$vaf_dataframe %>% tidyr::unite(col="labels_mut", labels:labels_viber, sep="[.]")
obj$vaf_dataframe %>% tidyr::unite(col="labels_mut", labels:labels_viber, sep=".")
obj$vaf_dataframe %>% tidyr::unite(col="labels_mut", labels:labels_viber)
obj$vaf_dataframe %>% tidyr::unite("labels_mut", labels:labels_viber)
obj$vaf_dataframe
obj$vaf_dataframe %>% tidyr::unite("labels_mut", labels.labels_viber)
obj$vaf_dataframe %>% tidyr::unite("labels_mut", "labels":"labels_viber")
obj$vaf_dataframe %>% tidyr::unite("labels_mut", "labels":"labels_viber", remove=F)
obj$vaf_dataframe %>% tidyr::unite("labels_mut", "labels":"labels_viber", remove=F) %>% View
obj$vaf_dataframe$labels_viber
obj$vaf_dataframe %>% dplyr::select(contains("labels"))
obj$vaf_dataframe %>%
mutate(labels=as.character(labels), labels_viber=as.character(labels_viber)) %>%
tidyr::unite("labels_mut", "labels":"labels_viber", remove=F)
obj$vaf_dataframe %>%
mutate(labels=as.character(labels), labels_viber=as.character(labels_viber)) %>%
tidyr::unite(labels_mut, labels:labels_viber, sep=":")
obj$vaf_dataframe %>%
mutate(labels=as.character(labels), labels_viber=as.character(labels_viber))
obj$vaf_dataframe %>% mutate(labels_mut=paste(labels,labels_viber,sep="."))
devtools::load_all()
plot_vaf(obj2, min_ccf=0.07)
dataframe = obj$vaf_dataframe %>% mutate(labels_mut=paste(labels,labels_viber,sep="."))
dataframe
dataframe %>% colnames
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber"))
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber")) %>% tidyr::pivot_longer(cols=starts_with("vaf"), names_to="timepoints_lineage", values_to="vaf")
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber")) %>% tidyr::pivot_longer(cols=starts_with("vaf"), names_to="timepoints_lineage", values_to="vaf") %>% separate(timepoints_lineage, into=c("vv","timepoints","lineage"))
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber")) %>% tidyr::pivot_longer(cols=starts_with("vaf"), names_to="timepoints_lineage", values_to="vaf") %>% separate(timepoints_lineage, into=c("vv","timepoints","lineage")) %>% mutate(timepoints=paste(vv,timepoints,sep="_"))
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber")) %>% tidyr::pivot_longer(cols=starts_with("vaf"), names_to="timepoints_lineage", values_to="vaf") %>% separate(timepoints_lineage, into=c("vv","timepoints","lineage")) %>% tidyr::pivot_wider(names_from=timepoints, values_from="vaf")
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber")) %>% tidyr::pivot_longer(cols=starts_with("vaf"), names_to="timepoints_lineage", values_to="vaf") %>% separate(timepoints_lineage, into=c("vv","timepoints","lineage")) %>% mutate(timepoints=paste(vv,timepoints,sep="_"),vv=NULL) tidyr::pivot_wider(names_from=timepoints, values_from="vaf")
dataframe %>% dplyr::select(starts_with("vaf"), mutation, IS, contains("labels"), contains("viber")) %>% tidyr::pivot_longer(cols=starts_with("vaf"), names_to="timepoints_lineage", values_to="vaf") %>% separate(timepoints_lineage, into=c("vv","timepoints","lineage")) %>% mutate(timepoints=paste(vv,timepoints,sep="_"),vv=NULL) %>% tidyr::pivot_wider(names_from=timepoints, values_from="vaf")
devtools::load_all()
plot_vaf(obj2, min_ccf=0.07)
devtools::load_all()
plot_vaf(obj2, min_ccf=0.07)
devtools::load_all()
plot_vaf(obj2, min_ccf=0.07)
clusters = select_relevant_clusters(obj, keep_thr=0.07)
design = "AAAB
AAAB
AAAB"
clusters = select_relevant_clusters(obj, min_ccf=0.07)
clusters
cluster
cluster="C_10"
df = obj$vaf_dataframe
df %>% filter(clusters==cluster)
df %>% filter(labels==cluster
)
plot_mullerplot(obj, highlight=cluster)
plot_mullerplot(obj, highlight=c(cluster))
get_muller_edges(obj)
obj.homo_pgk$params$labels
devtools::load_all()
devtools::load_all()
get_muller_edges(obj)
devtools::load_all()
get_muller_edges(obj)
plot_mullerplot(obj, highlight=c(cluster))
plot_mullerplot(obj, highlight=c(cluster), wrap=T)
plot_vaf(obj, highlight=c(cluster))
plot_vaf(obj, highlight=c(cluster)) + patchwork::wrap_plots(guides="collect")
plot_vaf(obj, highlight=c(cluster)) %>% patchwork::wrap_plots(guides="collect")
muller = plot_mullerplot(obj, highlight=c(cluster), wrap=T, legend.pos="none")
p = plot_vaf(obj, highlight=c(cluster)) %>% patchwork::wrap_plots(guides="collect")
# p = gmm_vaf(vaf, theta=theta, model=model.homo_ltr, facet=T, highlight=c(cluster))
wrapped = patchwork::wrap_plots(p, muller, design=design)
wrapped
design = "AAA#
AAAB
AAA#"
patchwork::wrap_plots(p, muller, design=design)
design = "AAA##
AAABB
AAA##"
patchwork::wrap_plots(p, muller, design=design)
design = "AAA##
AAABB
AAABB
AAA##"
patchwork::wrap_plots(p, muller, design=design)
plot_exp_fit()
plot_exp_fit(obj, highlight = c(cluster))
exp = plot_exp_fit(obj, highlight = c(cluster))
design = "AAA##
AAACC
AAA##
AAABB"
design = "AAACC
AAACC
AAABB
AAABB"
patchwork::wrap_plots(p, muller, exp, design=design)
exp = plot_exp_fit(obj, highlight = c(cluster)) + theme(legend.position = "none")
patchwork::wrap_plots(p, muller, exp, design=design)
pdf("HOMO_PGK.viber_clusters.multipage.pdf", height=6, width=12)
for (cluster in clusters) {
print(cluster)
if (df %>% filter(labels==cluster) %>% nrow > 0) {
muller = plot_mullerplot(obj, highlight=c(cluster), wrap=T, legend.pos="none")
p = plot_vaf(obj, highlight=c(cluster)) %>% patchwork::wrap_plots(guides="collect")
exp = plot_exp_fit(obj, highlight = c(cluster)) + theme(legend.position = "none")
wrapped = patchwork::wrap_plots(p, muller, exp, design=design)
print(wrapped + plot_annotation(title="VAF of mutations in experiments HOMO PGK across all lineages",
subtitle="threshold kept of 7%"))
}
}
dev.off()
dev.off()
pdf("./plots/HOMO_PGK.viber_clusters.multipage.pdf", height=6, width=12)
for (cluster in clusters) {
print(cluster)
if (df %>% filter(labels==cluster) %>% nrow > 0) {
muller = plot_mullerplot(obj, highlight=c(cluster), wrap=T, legend.pos="none")
p = plot_vaf(obj, highlight=c(cluster)) %>% patchwork::wrap_plots(guides="collect")
exp = plot_exp_fit(obj, highlight = c(cluster)) + theme(legend.position = "none")
wrapped = patchwork::wrap_plots(p, muller, exp, design=design)
print(wrapped + plot_annotation(title="VAF of mutations in experiments HOMO PGK across all lineages",
subtitle="threshold kept of 7%"))
}
}
dev.off()
pdf("./plots/HOMO_PGK.viber_clusters.multipage.pdf", height=6, width=12)
for (cluster in clusters) {
print(cluster)
if (df %>% filter(labels==cluster) %>% nrow > 0) {
muller = plot_mullerplot(obj, highlight=c(cluster), wrap=T, legend.pos="none")
p = plot_vaf(obj, highlight=c(cluster)) %>% patchwork::wrap_plots(guides="collect")
exp = plot_exp_fit(obj, highlight = c(cluster)) + theme(legend.position = "none")
wrapped = patchwork::wrap_plots(p, muller, exp, design=design)
print(wrapped + patchwork::plot_annotation(title="VAF of mutations in experiments HOMO PGK across all lineages",
subtitle="threshold kept of 7%"))
}
}
dev.off()
pdf("./plots/HOMO_PGK.viber_clusters.multipage2.pdf", height=10, width=12)
for (cluster in clusters) {
print(cluster)
if (df %>% filter(labels==cluster) %>% nrow > 0) {
muller = plot_mullerplot(obj, highlight=c(cluster), wrap=T, legend.pos="none")
p = plot_vaf(obj, highlight=c(cluster)) %>% patchwork::wrap_plots(guides="collect")
exp = plot_exp_fit(obj, highlight = c(cluster)) + theme(legend.position = "none")
wrapped = patchwork::wrap_plots(p, muller, exp, design=design)
print(wrapped + patchwork::plot_annotation(title="VAF of mutations in experiments HOMO PGK across all lineages",
subtitle="threshold kept of 7%"))
}
}
dev.off()
theta = lineaGT:::get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% column_to_rownames("labels_mut")
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyr::column_to_rownames("labels_mut")
library(tidyr)
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyr::column_to_rownames("labels_mut")
devtools::load_all()
devtools::document()
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyr::column_to_rownames("labels_mut")
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyr::column_to_rownames("labels_mut")
theta
get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% column_to_rownames("labels_mut")
get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels)
detach("package:tidyr", unload = TRUE)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyr::column_to_rownames("labels_mut")
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% column_to_rownames("labels_mut")
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyverse::column_to_rownames("labels_mut")
devtools::load_all()
devtools::document()
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tidyverse::column_to_rownames("labels_mut")
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% column_to_rownames("labels_mut")
theta = get_binomial_theta(obj2) %>% tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>% dplyr::select(-labels) %>% tibble::column_to_rownames("labels_mut")
theta
get_muller_pop(obj, means=theta)
devtools::load_all()
get_muller_pop(obj, means=theta)
devtools::load_all()
plot_exp_fit(obj2, viber=T)
plot_exp_fit(obj2, viber=F)
devtools::load_all()
devtools::load_all()
plot_exp_fit(obj2, viber=T)
plot_exp_fit(obj2, viber=F)
devtools::load_all()
plot_exp_fit(obj2, viber=F)
plot_exp_fit(obj2, viber=T)
devtools::load_all()
plot_exp_fit(obj2, viber=T)
obj2$vaf_dataframe %>% colnames()
get_muller_pop(obj, means=theta)
get_muller_pop(obj2, means=theta)
theta
theta %>% as.data.frame()
theta %>% as.data.frame() %>% tibble::rownames_to_column()
get_muller_pop(obj)
get_muller_pop(obj, theta)
devtools::load_all()
get_muller_pop(obj, theta)
theta %>% as.data.frame() %>% tibble::rownames_to_column() %>% reshape2::melt() %>%
tidyr::separate(variable, into=c("else", "Generation", "Lineage"), sep="_")
theta
theta %>% devtools::load_all()
devtools::load_all()
get_muller_pop(obj, theta)
devtools::load_all()
get_muller_pop(obj, theta)
theta %>% as.data.frame() %>% tibble::rownames_to_column() %>% reshape2::melt() %>%
tidyr::separate(variable, into=c("else", "Generation", "Lineage"), sep=[.])
theta %>% as.data.frame() %>% tibble::rownames_to_column() %>% reshape2::melt() %>%
tidyr::separate(variable, into=c("else", "Generation", "Lineage"), sep="\\.|\\_")
devtools::load_all()
get_muller_pop(obj, theta)
plot_exp_fit(obj2, viber=T)
devtools::load_all()
plot_exp_fit(obj2, viber=T)
obj$vaf_dataframe %>% filter(grepl(highlight, labels))
obj$vaf_dataframe %>% filter(grepl(list("C_10.C1","C_2.C2"), labels))
obj$vaf_dataframe
devtools::load_all()
plot_exp_fit(obj2, viber=T)
obj2$vaf_dataframe
obj2$vaf_dataframe$labels_viber
devtools::load_all()
obj2$vaf_dataframe$labels_viber
plot_exp_fit(obj2, viber=T)
devtools::load_all()
plot_exp_fit(obj2, viber=T)
plot_exp_fit(obj2, viber=T, highlight = c("C_11"))
devtools::load_all()
plot_exp_fit(obj2, viber=T, highlight = c("C_11"))
devtools::load_all()
plot_exp_fit(obj2, viber=T, facet=T)
devtools::load_all()
plot_exp_fit(obj2, viber=T, facet=T)
plot_exp_fit(obj2, viber=T)
devtools::load_all()
plot_exp_fit(obj2, viber=T, facet=T)
devtools::load_all()
plot_exp_fit(obj2, viber=T, facet=T)
plot_exp_fit(obj2, viber=T, facet=F, highlight = c("C_11"))
devtools::load_all()
plot_exp_fit(obj2, viber=T, facet=F, highlight = c("C_11"))
devtools::load_all()
plot_exp_fit(obj2, viber=T, facet=F, highlight = c("C_11"))
devtools::load_all()
plot_mullerplot(obj, viber=T)
devtools::load_all()
plot_mullerplot(obj, viber=T)
devtools::load_all()
plot_mullerplot(obj, viber=T)
theta = get_binomial_theta(obj) %>%
tidyr::pivot_wider(names_from="lineage", values_from=starts_with("vaf")) %>%
dplyr::select(-labels) %>% tibble::column_to_rownames("labels_mut")
pop_df = get_muller_pop(obj, means=theta)
pop_df
edges_df = get_muller_edges(obj, labels=pop_df$Identity %>% unique())
edges_df
get_muller_edges(obj, labels=pop_df$Identity %>% unique()) %>% duplicated()
get_muller_edges(obj, labels=pop_df$Identity %>% unique()) %>% drop()
edges_df = get_muller_edges(obj, labels=pop_df$Identity %>% unique()) %>% filter(Parent!=Identity)
edges_df
devtools::load_all()
plot_mullerplot(obj, viber=T)
plot_mullerplot(obj, viber=T, wrap=T)
theta
theta[theta>0.4]
theta[theta>0.4&&theta<0.6]
theta[theta>0.4 && theta<0.6]
plot_mullerplot(obj, viber=T, wrap=T, highlight = c("C_3"))
plot_mullerplot(obj, viber=T, wrap=T, highlight = c("C_3."))
devtools::load_all()
plot_mullerplot(obj, viber=T, wrap=T, highlight = c("C_3."))
plot_exp_fit(obj, highlight = c("C_11"))
plot_exp_fit(obj, highlight = c("C_11"), viber=T)
